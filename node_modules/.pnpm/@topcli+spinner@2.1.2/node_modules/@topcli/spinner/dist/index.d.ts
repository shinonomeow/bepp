import { EventEmitter } from 'node:events';
import * as TTY from 'node:tty';
import cliSpinners from 'cli-spinners';

interface ISpinnerOptions {
    /**
     * Spinner name (from cli-spinners lib)
     *
     * @default "dots"
     */
    name?: cliSpinners.SpinnerName;
    /**
     * Spinner frame color
     *
     * @default "white"
     */
    color?: string;
    /**
     * Do not log anything when disabled
     *
     * @default true
     */
    verbose?: boolean;
}
interface IStartOptions {
    withPrefix?: string;
}
declare class Spinner extends EventEmitter {
    #private;
    static reset(): void;
    stream: TTY.WriteStream;
    constructor(options?: ISpinnerOptions);
    get started(): boolean;
    get verbose(): boolean;
    get elapsedTime(): number;
    get startTime(): number;
    set text(value: string | undefined);
    get text(): string | undefined;
    start(text?: string, options?: IStartOptions): this;
    succeed(text?: string): this;
    failed(text?: string): this;
}

interface IComputeSpinnerOptions {
    text: string;
    spinner?: Omit<ISpinnerOptions, "verbose">;
    withPrefix?: string;
}
interface ISpinnerLoggerOptions {
    success?: (elapsedTime: number) => string;
    fail?: (error: Error) => string;
}
declare function computeWithSpinner<T = void>(asynchronousOp: (spinner: Spinner) => Promise<T>, options: IComputeSpinnerOptions, logs?: ISpinnerLoggerOptions): Promise<T>;

export { IComputeSpinnerOptions, ISpinnerLoggerOptions, ISpinnerOptions, IStartOptions, Spinner, computeWithSpinner };
