export declare const allBrowsers: {
    safari: {
        mv2: undefined;
        props: {
            name: "safari";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildSafariParams) => Promise<void>;
    };
    "safari-mv2": {
        build: (values: BuildSafariMv2Params) => Promise<void>;
        props: {
            name: "safari-mv2";
            target: "chromium";
            man: "2";
        };
    };
    chrome: {
        mv2: undefined;
        props: {
            name: "chrome";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildChromeParams) => Promise<void>;
    };
    "chrome-mv2": {
        build: (values: BuildChromeParams) => Promise<void>;
        props: {
            name: "chrome-mv2";
            target: "chromium";
            man: "2";
        };
    };
    firefox: {
        mv2: undefined;
        props: {
            name: "firefox";
            target: "firefox";
            man: "3";
        };
        build: (values: BuildFirefoxParams) => Promise<void>;
    };
    "firefox-mv2": {
        build: (values: BuildFirefoxMv2Params) => Promise<void>;
        props: {
            name: "firefox-mv2";
            target: "firefox";
            man: "2";
        };
    };
    chromium: {
        mv2: undefined;
        props: {
            name: "chromium";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildChromiumParams) => Promise<void>;
    };
    "chromium-mv2": {
        build: (values: BuildChromiumMv2Params) => Promise<void>;
        props: {
            name: "chromium-mv2";
            target: "chromium";
            man: "2";
        };
    };
    edge: {
        mv2: undefined;
        props: {
            name: "edge";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildEdgeParams) => Promise<void>;
    };
    "edge-mv2": {
        build: (values: BuildEdgeMv2Params) => Promise<void>;
        props: {
            name: "edge-mv2";
            target: "chromium";
            man: "2";
        };
    };
    yandex: {
        mv2: undefined;
        props: {
            name: "yandex";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildYandexParams) => Promise<void>;
    };
    "yandex-mv2": {
        build: (values: BuildYandexMv2Params) => Promise<void>;
        props: {
            name: "yandex-mv2";
            target: "chromium";
            man: "2";
        };
    };
    brave: {
        props: {
            name: "brave";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildBraveParams) => Promise<void>;
    };
    opera: {
        props: {
            name: "opera";
            target: "chromium";
            man: "2";
        };
        build: (values: BuildOperaParams) => Promise<void>;
    };
    "opera-gx": {
        props: {
            name: "opera-gx";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildOperaGXParams) => Promise<void>;
    };
    custom: {
        props: {
            name: "custom";
            target: "all";
            man: "none";
        };
        build: (values: BuildCustomParams) => Promise<void>;
    };
};

export declare const brave: {
    props: {
        name: "brave";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildBraveParams) => Promise<void>;
};

declare type BrowserArgs<T> = T extends keyof typeof allBrowsers ? Parameters<typeof allBrowsers[T]['build']>[0] : never;

declare type BrowserTypes = ObjectValues<typeof browserTypes>;

declare const browserTypes: {
    readonly chrome: "chrome";
    readonly chromeMv2: "chrome-mv2";
    readonly chromium: "chromium";
    readonly chromiumMv2: "chromium-mv2";
    readonly firefox: "firefox";
    readonly firefoxMv2: "firefox-mv2";
    readonly yandex: "yandex";
    readonly yandexMv2: "yandex-mv2";
    readonly edge: "edge";
    readonly edgeMv2: "edge-mv2";
    readonly safari: "safari";
    readonly safariMv2: "safari-mv2";
    readonly brave: "brave";
    readonly opera: "opera";
    readonly operagx: "opera-gx";
    readonly custom: "custom";
};

declare type BrowserTypesMap = typeof browserTypes;

export declare const buildAllBrowsers: <T extends BrowserTypes>(args: { [key in T]: BrowserArgs<T>; }) => Promise<void>;

declare type BuildBraveParams = BuildBrowserSharedParams;

export declare const buildBrowser: <T extends BrowserTypes>(type: T, args: BrowserArgs<T>) => Promise<void>;

declare type BuildBrowserSharedParams = BuildSharedParams & {
    input: string;
};

declare type BuildChromeParams = BuildChromeSharedParams & {
    inputMv2?: string;
};

declare type BuildChromeSharedParams = BuildBrowserSharedParams;

declare type BuildChromiumMv2Params = BuildChromiumSharedParams;

declare type BuildChromiumParams = BuildChromiumSharedParams & {
    inputMv2?: string;
};

declare type BuildChromiumSharedParams = BuildBrowserSharedParams;

declare type BuildConfig = {
    shared?: BuildConfigShared;
    build?: BuildConfigBuild;
};

export declare const buildConfig: (values?: BuildConfigParams) => Promise<void>;

declare type BuildConfigBuild = (BuildTypeParams<BrowserTypesMap['chrome'], BuildChromeSharedParams> | BuildTypeParams<BrowserTypesMap['chromeMv2'], BuildChromeSharedParams> | BuildTypeParams<BrowserTypesMap['chromium'], BuildChromiumSharedParams> | BuildTypeParams<BrowserTypesMap['chromiumMv2'], BuildChromiumSharedParams> | BuildTypeParams<BrowserTypesMap['firefox'], BuildFirefoxSharedParams> | BuildTypeParams<BrowserTypesMap['firefoxMv2'], BuildFirefoxSharedParams> | BuildTypeParams<BrowserTypesMap['safari'], BuildSafariMacosParams> | BuildTypeParams<BrowserTypesMap['safariMv2'], BuildSafariMacosParams> | BuildTypeParams<BrowserTypesMap['edge'], BuildEdgeSharedParams> | BuildTypeParams<BrowserTypesMap['edgeMv2'], BuildEdgeSharedParams> | BuildTypeParams<BrowserTypesMap['brave'], BuildBraveParams> | BuildTypeParams<BrowserTypesMap['opera'], BuildOperaParams> | BuildTypeParams<BrowserTypesMap['operagx'], BuildOperaGXParams> | BuildTypeParams<BrowserTypesMap['yandex'], BuildYandexSharedParams> | BuildTypeParams<BrowserTypesMap['yandexMv2'], BuildYandexSharedParams> | BuildTypeParams<BrowserTypesMap['custom'], BuildCustomParams>)[];

declare type BuildConfigParams = CmdSharedOptions & buildConfigProps;

declare type buildConfigProps = {
    config?: string | BuildConfig;
};

declare type BuildConfigShared = Omit<BuildBrowserSharedParams, 'input'> & {
    input?: BuildConfigSharedInput;
};

declare type BuildConfigSharedInput = {
    [manTypes.chromium]?: string;
    [manTypes.chromiumMv2]?: string;
    [manTypes.firefox]?: string;
    [manTypes.firefoxMv2]?: string;
};

declare type BuildCustomParams = BuildBrowserSharedParams & {
    browserName?: string;
};

declare type BuildEdgeMv2Params = BuildEdgeSharedParams;

declare type BuildEdgeParams = BuildEdgeSharedParams & {
    inputMv2?: string;
};

declare type BuildEdgeSharedParams = BuildBrowserSharedParams;

declare type BuildFirefoxMv2Params = BuildFirefoxSharedParams;

declare type BuildFirefoxParams = BuildFirefoxSharedParams & {
    inputMv2?: string;
};

declare type BuildFirefoxSharedParams = BuildBrowserSharedParams;

declare type BuildOperaGXParams = BuildBrowserSharedParams;

declare type BuildOperaParams = BuildBrowserSharedParams;

declare type BuildSafariMacosParams = BuildSafariSharedParams & {
    dmgIcon?: string;
    dmgNoReadme?: boolean;
    dmgReadmePath?: string;
    dmgReadmeFilename?: string;
};

declare type BuildSafariMv2Params = BuildSafariMacosParams;

declare type BuildSafariParams = BuildSafariMacosParams & {
    inputMv2?: string;
};

declare type BuildSafariSharedParams = BuildBrowserSharedParams & {
    appId?: string;
    appTitle?: string;
    onlyXcodeProject?: boolean;
};

declare type BuildSharedParams = CmdSharedOptions & {
    id?: string;
    output?: string;
    compress?: CompressTypes;
    filename?: string;
};

declare type BuildTypeParams<TypeString, BrowserType extends BuildBrowserSharedParams> = {
    type: TypeString;
} & Partial<BrowserType>;

declare type BuildYandexMv2Params = BuildYandexSharedParams;

declare type BuildYandexParams = BuildYandexSharedParams & {
    inputMv2?: string;
};

declare type BuildYandexSharedParams = BuildBrowserSharedParams;

export declare const chrome: {
    props: {
        name: "chrome";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildChromeParams) => Promise<void>;
    mv2: {
        build: (values: BuildChromeParams) => Promise<void>;
        props: {
            name: "chrome-mv2";
            target: "chromium";
            man: "2";
        };
    };
};

export declare const chromium: {
    props: {
        name: "chromium";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildChromiumParams) => Promise<void>;
    mv2: {
        build: (values: BuildChromiumMv2Params) => Promise<void>;
        props: {
            name: "chromium-mv2";
            target: "chromium";
            man: "2";
        };
    };
};

declare type CmdSharedOptions = {
    verbose?: boolean;
    time?: boolean;
    exit?: boolean;
};

declare type CompressTypes = ObjectValues<typeof compressTypes>;

declare const compressTypes: {
    readonly tar: "tar";
    readonly tgz: "tgz";
    readonly gzip: "gzip";
    readonly zip: "zip";
};

export declare const custom: {
    props: {
        name: "custom";
        target: "all";
        man: "none";
    };
    build: (values: BuildCustomParams) => Promise<void>;
};

declare const _default: {
    buildConfig: (values?: BuildConfigParams) => Promise<void>;
    chrome: {
        props: {
            name: "chrome";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildChromeParams) => Promise<void>;
        mv2: {
            build: (values: BuildChromeParams) => Promise<void>;
            props: {
                name: "chrome-mv2";
                target: "chromium";
                man: "2";
            };
        };
    };
    chromium: {
        props: {
            name: "chromium";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildChromiumParams) => Promise<void>;
        mv2: {
            build: (values: BuildChromiumMv2Params) => Promise<void>;
            props: {
                name: "chromium-mv2";
                target: "chromium";
                man: "2";
            };
        };
    };
    firefox: {
        props: {
            name: "firefox";
            target: "firefox";
            man: "3";
        };
        build: (values: BuildFirefoxParams) => Promise<void>;
        mv2: {
            build: (values: BuildFirefoxMv2Params) => Promise<void>;
            props: {
                name: "firefox-mv2";
                target: "firefox";
                man: "2";
            };
        };
    };
    edge: {
        props: {
            name: "edge";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildEdgeParams) => Promise<void>;
        mv2: {
            build: (values: BuildEdgeMv2Params) => Promise<void>;
            props: {
                name: "edge-mv2";
                target: "chromium";
                man: "2";
            };
        };
    };
    safari: {
        props: {
            name: "safari";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildSafariParams) => Promise<void>;
        mv2: {
            build: (values: BuildSafariMv2Params) => Promise<void>;
            props: {
                name: "safari-mv2";
                target: "chromium";
                man: "2";
            };
        };
    };
    brave: {
        props: {
            name: "brave";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildBraveParams) => Promise<void>;
    };
    custom: {
        props: {
            name: "custom";
            target: "all";
            man: "none";
        };
        build: (values: BuildCustomParams) => Promise<void>;
    };
    operaGx: {
        props: {
            name: "opera-gx";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildOperaGXParams) => Promise<void>;
    };
    opera: {
        props: {
            name: "opera";
            target: "chromium";
            man: "2";
        };
        build: (values: BuildOperaParams) => Promise<void>;
    };
    yandex: {
        props: {
            name: "yandex";
            target: "chromium";
            man: "3";
        };
        build: (values: BuildYandexParams) => Promise<void>;
        mv2: {
            build: (values: BuildYandexMv2Params) => Promise<void>;
            props: {
                name: "yandex-mv2";
                target: "chromium";
                man: "2";
            };
        };
    };
    buildAllBrowsers: <T extends BrowserTypes>(args: { [key in T]: T extends "chromium" | "chromium-mv2" | "firefox" | "firefox-mv2" | "chrome" | "chrome-mv2" | "yandex" | "yandex-mv2" | "edge" | "edge-mv2" | "safari" | "safari-mv2" | "brave" | "opera" | "opera-gx" | "custom" ? Parameters<{
            safari: {
                mv2: undefined;
                props: {
                    name: "safari";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildSafariParams) => Promise<void>;
            };
            "safari-mv2": {
                build: (values: BuildSafariMv2Params) => Promise<void>;
                props: {
                    name: "safari-mv2";
                    target: "chromium";
                    man: "2";
                };
            };
            chrome: {
                mv2: undefined;
                props: {
                    name: "chrome";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildChromeParams) => Promise<void>;
            };
            "chrome-mv2": {
                build: (values: BuildChromeParams) => Promise<void>;
                props: {
                    name: "chrome-mv2";
                    target: "chromium";
                    man: "2";
                };
            };
            firefox: {
                mv2: undefined;
                props: {
                    name: "firefox";
                    target: "firefox";
                    man: "3";
                };
                build: (values: BuildFirefoxParams) => Promise<void>;
            };
            "firefox-mv2": {
                build: (values: BuildFirefoxMv2Params) => Promise<void>;
                props: {
                    name: "firefox-mv2";
                    target: "firefox";
                    man: "2";
                };
            };
            chromium: {
                mv2: undefined;
                props: {
                    name: "chromium";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildChromiumParams) => Promise<void>;
            };
            "chromium-mv2": {
                build: (values: BuildChromiumMv2Params) => Promise<void>;
                props: {
                    name: "chromium-mv2";
                    target: "chromium";
                    man: "2";
                };
            };
            edge: {
                mv2: undefined;
                props: {
                    name: "edge";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildEdgeParams) => Promise<void>;
            };
            "edge-mv2": {
                build: (values: BuildEdgeMv2Params) => Promise<void>;
                props: {
                    name: "edge-mv2";
                    target: "chromium";
                    man: "2";
                };
            };
            yandex: {
                mv2: undefined;
                props: {
                    name: "yandex";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildYandexParams) => Promise<void>;
            };
            "yandex-mv2": {
                build: (values: BuildYandexMv2Params) => Promise<void>;
                props: {
                    name: "yandex-mv2";
                    target: "chromium";
                    man: "2";
                };
            };
            brave: {
                props: {
                    name: "brave";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildBraveParams) => Promise<void>;
            };
            opera: {
                props: {
                    name: "opera";
                    target: "chromium";
                    man: "2";
                };
                build: (values: BuildOperaParams) => Promise<void>;
            };
            "opera-gx": {
                props: {
                    name: "opera-gx";
                    target: "chromium";
                    man: "3";
                };
                build: (values: BuildOperaGXParams) => Promise<void>;
            };
            custom: {
                props: {
                    name: "custom";
                    target: "all";
                    man: "none";
                };
                build: (values: BuildCustomParams) => Promise<void>;
            };
        }[T]["build"]>[0] : never; }) => Promise<void>;
    buildBrowser: <T extends BrowserTypes>(type: T, args: T extends "chromium" | "chromium-mv2" | "firefox" | "firefox-mv2" | "chrome" | "chrome-mv2" | "yandex" | "yandex-mv2" | "edge" | "edge-mv2" | "safari" | "safari-mv2" | "brave" | "opera" | "opera-gx" | "custom" ? Parameters<{
        safari: {
            mv2: undefined;
            props: {
                name: "safari";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildSafariParams) => Promise<void>;
        };
        "safari-mv2": {
            build: (values: BuildSafariMv2Params) => Promise<void>;
            props: {
                name: "safari-mv2";
                target: "chromium";
                man: "2";
            };
        };
        chrome: {
            mv2: undefined;
            props: {
                name: "chrome";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildChromeParams) => Promise<void>;
        };
        "chrome-mv2": {
            build: (values: BuildChromeParams) => Promise<void>;
            props: {
                name: "chrome-mv2";
                target: "chromium";
                man: "2";
            };
        };
        firefox: {
            mv2: undefined;
            props: {
                name: "firefox";
                target: "firefox";
                man: "3";
            };
            build: (values: BuildFirefoxParams) => Promise<void>;
        };
        "firefox-mv2": {
            build: (values: BuildFirefoxMv2Params) => Promise<void>;
            props: {
                name: "firefox-mv2";
                target: "firefox";
                man: "2";
            };
        };
        chromium: {
            mv2: undefined;
            props: {
                name: "chromium";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildChromiumParams) => Promise<void>;
        };
        "chromium-mv2": {
            build: (values: BuildChromiumMv2Params) => Promise<void>;
            props: {
                name: "chromium-mv2";
                target: "chromium";
                man: "2";
            };
        };
        edge: {
            mv2: undefined;
            props: {
                name: "edge";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildEdgeParams) => Promise<void>;
        };
        "edge-mv2": {
            build: (values: BuildEdgeMv2Params) => Promise<void>;
            props: {
                name: "edge-mv2";
                target: "chromium";
                man: "2";
            };
        };
        yandex: {
            mv2: undefined;
            props: {
                name: "yandex";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildYandexParams) => Promise<void>;
        };
        "yandex-mv2": {
            build: (values: BuildYandexMv2Params) => Promise<void>;
            props: {
                name: "yandex-mv2";
                target: "chromium";
                man: "2";
            };
        };
        brave: {
            props: {
                name: "brave";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildBraveParams) => Promise<void>;
        };
        opera: {
            props: {
                name: "opera";
                target: "chromium";
                man: "2";
            };
            build: (values: BuildOperaParams) => Promise<void>;
        };
        "opera-gx": {
            props: {
                name: "opera-gx";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildOperaGXParams) => Promise<void>;
        };
        custom: {
            props: {
                name: "custom";
                target: "all";
                man: "none";
            };
            build: (values: BuildCustomParams) => Promise<void>;
        };
    }[T]["build"]>[0] : never) => Promise<void>;
    allBrowsers: {
        safari: {
            mv2: undefined;
            props: {
                name: "safari";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildSafariParams) => Promise<void>;
        };
        "safari-mv2": {
            build: (values: BuildSafariMv2Params) => Promise<void>;
            props: {
                name: "safari-mv2";
                target: "chromium";
                man: "2";
            };
        };
        chrome: {
            mv2: undefined;
            props: {
                name: "chrome";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildChromeParams) => Promise<void>;
        };
        "chrome-mv2": {
            build: (values: BuildChromeParams) => Promise<void>;
            props: {
                name: "chrome-mv2";
                target: "chromium";
                man: "2";
            };
        };
        firefox: {
            mv2: undefined;
            props: {
                name: "firefox";
                target: "firefox";
                man: "3";
            };
            build: (values: BuildFirefoxParams) => Promise<void>;
        };
        "firefox-mv2": {
            build: (values: BuildFirefoxMv2Params) => Promise<void>;
            props: {
                name: "firefox-mv2";
                target: "firefox";
                man: "2";
            };
        };
        chromium: {
            mv2: undefined;
            props: {
                name: "chromium";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildChromiumParams) => Promise<void>;
        };
        "chromium-mv2": {
            build: (values: BuildChromiumMv2Params) => Promise<void>;
            props: {
                name: "chromium-mv2";
                target: "chromium";
                man: "2";
            };
        };
        edge: {
            mv2: undefined;
            props: {
                name: "edge";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildEdgeParams) => Promise<void>;
        };
        "edge-mv2": {
            build: (values: BuildEdgeMv2Params) => Promise<void>;
            props: {
                name: "edge-mv2";
                target: "chromium";
                man: "2";
            };
        };
        yandex: {
            mv2: undefined;
            props: {
                name: "yandex";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildYandexParams) => Promise<void>;
        };
        "yandex-mv2": {
            build: (values: BuildYandexMv2Params) => Promise<void>;
            props: {
                name: "yandex-mv2";
                target: "chromium";
                man: "2";
            };
        };
        brave: {
            props: {
                name: "brave";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildBraveParams) => Promise<void>;
        };
        opera: {
            props: {
                name: "opera";
                target: "chromium";
                man: "2";
            };
            build: (values: BuildOperaParams) => Promise<void>;
        };
        "opera-gx": {
            props: {
                name: "opera-gx";
                target: "chromium";
                man: "3";
            };
            build: (values: BuildOperaGXParams) => Promise<void>;
        };
        custom: {
            props: {
                name: "custom";
                target: "all";
                man: "none";
            };
            build: (values: BuildCustomParams) => Promise<void>;
        };
    };
    init: (values?: InitParams) => Promise<void>;
};
export default _default;

export declare const edge: {
    props: {
        name: "edge";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildEdgeParams) => Promise<void>;
    mv2: {
        build: (values: BuildEdgeMv2Params) => Promise<void>;
        props: {
            name: "edge-mv2";
            target: "chromium";
            man: "2";
        };
    };
};

export declare const firefox: {
    props: {
        name: "firefox";
        target: "firefox";
        man: "3";
    };
    build: (values: BuildFirefoxParams) => Promise<void>;
    mv2: {
        build: (values: BuildFirefoxMv2Params) => Promise<void>;
        props: {
            name: "firefox-mv2";
            target: "firefox";
            man: "2";
        };
    };
};

export declare const init: (values?: InitParams) => Promise<void>;

declare type InitParams = CmdSharedOptions & {
    id?: string;
    input?: string;
    build?: BrowserTypes[];
    y?: true;
};

declare const manTypes: {
    readonly chromium: "chromium";
    readonly chromiumMv2: "chromium-mv2";
    readonly firefox: "firefox";
    readonly firefoxMv2: "firefox-mv2";
};

declare type ObjectValues<Values> = Values[keyof Values];

export declare const opera: {
    props: {
        name: "opera";
        target: "chromium";
        man: "2";
    };
    build: (values: BuildOperaParams) => Promise<void>;
};

export declare const operaGx: {
    props: {
        name: "opera-gx";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildOperaGXParams) => Promise<void>;
};

export declare const safari: {
    props: {
        name: "safari";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildSafariParams) => Promise<void>;
    mv2: {
        build: (values: BuildSafariMv2Params) => Promise<void>;
        props: {
            name: "safari-mv2";
            target: "chromium";
            man: "2";
        };
    };
};

export declare const yandex: {
    props: {
        name: "yandex";
        target: "chromium";
        man: "3";
    };
    build: (values: BuildYandexParams) => Promise<void>;
    mv2: {
        build: (values: BuildYandexMv2Params) => Promise<void>;
        props: {
            name: "yandex-mv2";
            target: "chromium";
            man: "2";
        };
    };
};

export { }
