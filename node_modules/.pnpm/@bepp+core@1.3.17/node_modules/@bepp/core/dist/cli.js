import { e as extra, n as name, d as description, v as version, L as Logger, I as InitCore, B as BuildConfigCore, c as compressTypes, a as extTypes, b as BuildBrowserSharedCore, f as BuildChromiumCore, g as BuildEdgeCore, h as BuildBraveCore, i as BuildOperaCore, j as BuildOperaGXCore, k as BuildChromeCore, l as BuildFirefoxCore, m as BuildCustomCore, o as BuildYandexCore, p as BuildSafariCore } from "./main-BRNoXKCi.js";
import { Command, Option } from "@commander-js/extra-typings";
import chalk from "chalk";
const docsPath = extra.docsPath.lib;
const moreInfoLink = (path = void 0) => `
More info: ${chalk.italic.gray.underline("https://bepp.pigeonposse.com" + docsPath + (path ? path : ""))}
`;
const setupProgram = (cb) => {
  const program = new Command();
  program.name(name).description(chalk.blackBright(description)).addHelpText("after", moreInfoLink()).version(chalk.green(version), "-V, --version", chalk.gray("Output the version number")).helpOption("-h, --help", chalk.gray("Display help for command")).helpCommand("help [command]", chalk.gray("Display help for command"));
  if (typeof cb === "function") cb(program);
  program.parse();
};
class SuperCLI {
  program;
  name = name;
  version = version;
  log = new Logger();
  constructor(args) {
    this.program = args.program;
    this.program.configureOutput({
      outputError: (str, write) => {
        if (str.startsWith("error: ")) {
          const message = str.replace("error: ", "");
          this.log.fatal(message);
        } else
          write(str);
      }
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  addOptions(cmdInstance) {
    const baseOption = (value, desc, defaultValue) => {
      const option = new Option(
        value,
        chalk.gray(desc)
      );
      if (defaultValue) option.default(defaultValue);
      return option;
    };
    const opts = {
      addOptionBool: ({ value, desc, defaultValue }) => {
        const option = baseOption(value.toString(), desc, defaultValue);
        return cmdInstance.addOption(option);
      },
      addOptionArray: ({ value, desc, defaultValue, name: name2, choices }) => {
        const nameString = `<${name2}...>`;
        const option = baseOption(`${value.toString()} ${nameString}`, desc, defaultValue);
        if (choices) option.choices(choices);
        return cmdInstance.addOption(option);
      },
      addOptionString: ({ value, desc, defaultValue, name: name2, choices }) => {
        const nameString = `<${name2}>`;
        const option = baseOption(`${value.toString()} ${nameString}`, desc, defaultValue);
        if (choices) option.choices(choices);
        return cmdInstance.addOption(option);
      }
    };
    return opts;
  }
  addCMD({ value, desc, infoPath = void 0 }, action) {
    const cmdInstance = this.program.command(value).description(chalk.blackBright(desc)).addHelpText("after", moreInfoLink(infoPath)).action(action);
    return {
      ...this.addOptions(cmdInstance)
    };
  }
  CMDConstructor({ cmd, options, action }) {
    const command = this.addCMD(
      cmd,
      action
    );
    options.forEach((opt) => {
      if (opt.type === "boolean") {
        command.addOptionBool(opt);
      } else if (opt.type === "string") {
        command.addOptionString(opt);
      } else if (opt.type === "array") {
        command.addOptionArray(opt);
      }
    });
    command.addOptionBool({
      value: [
        "-v",
        "--verbose"
      ],
      desc: "Use verbose output"
    });
    command.addOptionBool({
      value: [
        "-t",
        "--time"
      ],
      desc: "Print execution time"
    });
    command.addOptionBool({
      value: [
        "-e",
        "--exit"
      ],
      desc: "Force exit from process on error"
    });
  }
}
class InitCLI extends SuperCLI {
  core = new InitCore();
  run() {
    this.CMDConstructor({
      cmd: {
        value: "init",
        desc: "Create a config file for build extension",
        infoPath: "init"
      },
      options: [
        {
          type: "boolean",
          value: [
            "-y"
          ],
          desc: "No prompt questions are set",
          defaultValue: this.core.defaultParams.y
        },
        {
          type: "string",
          value: [
            "--id"
          ],
          name: "extension-name",
          desc: "Identification for build. Used in filename build.",
          defaultValue: this.core.defaultParams.id
        },
        {
          type: "string",
          value: [
            "-i",
            "--input"
          ],
          name: "input-path",
          desc: "Input directory for Chromium extension"
        },
        {
          type: "array",
          value: [
            "-b",
            "--build"
          ],
          name: "browser-ids",
          desc: "List for browser builds",
          choices: this.core.defaultParams.build
        }
      ],
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildConfigCLI extends SuperCLI {
  core = new BuildConfigCore();
  run() {
    this.CMDConstructor({
      cmd: {
        value: "build",
        desc: "Package extensions with a config file",
        infoPath: "build/config-file"
      },
      options: [
        {
          type: "string",
          value: ["-c", "--config"],
          name: "config-file-path",
          desc: "Path for config file"
        }
      ],
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildBrowserSharedCLI extends SuperCLI {
  baseBrowserConstructor({
    id,
    name: name2,
    browser = extTypes.chromium,
    man2 = false,
    experimental = false,
    action,
    options = void 0
  }) {
    const core = new BuildBrowserSharedCore();
    const extTypeName = browser == extTypes.chromium ? "Chromium extension" : browser == extTypes.firefox ? "Firefox extension" : "Extension";
    this.CMDConstructor({
      cmd: {
        value: "build-" + id,
        desc: `Package ${name2} extension${experimental ? " (Experimental)" : ""}`,
        infoPath: "build/" + id
      },
      options: [
        {
          type: "string",
          value: ["-i", "--input"],
          name: "input-path",
          desc: `Input directory for ${extTypeName}`
        },
        ...man2 ? [{
          type: "string",
          value: ["-i-2", "--input-mv2"],
          name: "input-path",
          desc: `Input directory for ${extTypeName} (manifest 2)`
        }] : [],
        {
          type: "string",
          value: ["--id"],
          name: "string",
          desc: "Identification for build. Used in filename build.",
          defaultValue: core.defaultParams.id
        },
        {
          type: "string",
          value: ["-o", "--output"],
          name: "output-path",
          desc: "Output directory for packaged extensions",
          defaultValue: core.defaultParams.output
        },
        {
          type: "string",
          value: ["-c", "--compress"],
          name: "compression-format",
          desc: "Compression format for packaging",
          defaultValue: core.defaultParams.compress,
          choices: Object.values(compressTypes)
        },
        {
          type: "string",
          value: ["-f", "--filename"],
          name: "filename-template",
          desc: "Filename template for packaged extensions",
          defaultValue: core.defaultParams.filename
        },
        ...options || []
      ],
      action
    });
  }
}
class BuildChromiumCLI extends BuildBrowserSharedCLI {
  core = new BuildChromiumCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.chromium,
      name: "Chromium",
      man2: true,
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildEdgeCLI extends BuildBrowserSharedCLI {
  core = new BuildEdgeCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.edge,
      name: "Edge",
      man2: true,
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildBraveCLI extends BuildBrowserSharedCLI {
  core = new BuildBraveCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.brave,
      name: "Brave",
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildOperaCLI extends BuildBrowserSharedCLI {
  core = new BuildOperaCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.opera,
      name: "Opera",
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildOperaGXCLI extends BuildBrowserSharedCLI {
  core = new BuildOperaGXCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.operagx,
      name: "Opera GX",
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildChromeCLI extends BuildBrowserSharedCLI {
  core = new BuildChromeCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.chrome,
      name: "Chrome",
      man2: true,
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildFirefoxCLI extends BuildBrowserSharedCLI {
  core = new BuildFirefoxCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.firefox,
      name: "Firefox",
      browser: extTypes.firefox,
      man2: true,
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildCustomCLI extends BuildBrowserSharedCLI {
  core = new BuildCustomCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.custom,
      name: "Custom",
      browser: extTypes.all,
      options: [{
        type: "array",
        value: ["-b", "--browser-name"],
        name: "name",
        desc: "Set the browser name to be used by the {{browser}} placeholder"
      }],
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildYandexCLI extends BuildBrowserSharedCLI {
  core = new BuildYandexCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.yandex,
      name: "Yandex",
      man2: true,
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildSafariSharedCLI extends BuildBrowserSharedCLI {
  getSharedOpts(defaultId, defaulTitle) {
    const res = [
      {
        type: "string",
        value: ["--app-id"],
        name: "app-id",
        desc: "Bundle identifier for the generated app",
        defaultValue: defaultId
      },
      {
        type: "string",
        value: ["--app-title"],
        name: "app-title",
        desc: "Title for the generated app",
        defaultValue: defaulTitle
      },
      {
        type: "boolean",
        value: ["--only-xcode-project"],
        desc: "This option packages only the xcode project, this is useful in case you want to develop after converting from chromium to safari"
      }
    ];
    return res;
  }
}
class BuildSafariCLI extends BuildSafariSharedCLI {
  core = new BuildSafariCore();
  run() {
    this.baseBrowserConstructor({
      id: this.core.browsersIds.safari,
      name: "Safari",
      man2: true,
      experimental: true,
      options: [
        ...this.getSharedOpts(
          this.core.defaultSafariParams.appId,
          this.core.defaultSafariParams.appTitle
        ),
        {
          type: "string",
          value: ["--dmg-icon"],
          name: "dmg-icon",
          desc: "Custom icon for DMG (macOS)"
        },
        {
          type: "boolean",
          value: ["--dmg-no-readme"],
          desc: "Desactive readme file for DMG (macOS)"
        },
        {
          type: "string",
          value: ["--dmg-readme-path"],
          name: "dmg-readme-path",
          desc: "Custom readme path for DMG (macOS)"
        },
        {
          type: "string",
          value: ["--dmg-readme-filename"],
          name: "dmg-readme-filename",
          desc: "Change readme filename for DMG (macOS)",
          defaultValue: this.core.defaultSafariParams.dmgReadmeFilename
        }
      ],
      // @ts-ignore
      action: this.core.create.bind(this.core)
    });
  }
}
class BuildCLI extends SuperCLI {
  run() {
    const args = { program: this.program };
    const config = new BuildConfigCLI(args);
    const safari = new BuildSafariCLI(args);
    const chrome = new BuildChromeCLI(args);
    const firefox = new BuildFirefoxCLI(args);
    const chromium = new BuildChromiumCLI(args);
    const edge = new BuildEdgeCLI(args);
    const brave = new BuildBraveCLI(args);
    const yandex = new BuildYandexCLI(args);
    const opera = new BuildOperaCLI(args);
    const operaGX = new BuildOperaGXCLI(args);
    const custom = new BuildCustomCLI(args);
    config.run();
    chrome.run();
    firefox.run();
    safari.run();
    chromium.run();
    edge.run();
    brave.run();
    opera.run();
    operaGX.run();
    yandex.run();
    custom.run();
  }
}
const run = () => {
  setupProgram((program) => {
    const init = new InitCLI({
      program
    });
    const build = new BuildCLI({
      program
    });
    init.run();
    build.run();
  });
};
export {
  run
};
